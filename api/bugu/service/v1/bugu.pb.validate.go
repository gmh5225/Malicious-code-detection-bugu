// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/bugu.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _bugu_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReplyMultiError, or
// nil if none found.
func (m *RegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterReplyMultiError(errors)
	}

	return nil
}

// RegisterReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReplyMultiError) AllErrors() []error { return m }

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetCurrentUserRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

func (m *GetCurrentUserRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserReplyMultiError, or nil if none found.
func (m *GetCurrentUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentUserReplyMultiError(errors)
	}

	return nil
}

// GetCurrentUserReplyMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserReply.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserReplyMultiError) AllErrors() []error { return m }

// GetCurrentUserReplyValidationError is the validation error returned by
// GetCurrentUserReply.Validate if the designated constraints aren't met.
type GetCurrentUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserReplyValidationError) ErrorName() string {
	return "GetCurrentUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserReplyValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserReplyMultiError, or nil if none found.
func (m *UpdateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserReplyMultiError(errors)
	}

	return nil
}

// UpdateUserReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReplyMultiError) AllErrors() []error { return m }

// UpdateUserReplyValidationError is the validation error returned by
// UpdateUserReply.Validate if the designated constraints aren't met.
type UpdateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReplyValidationError) ErrorName() string { return "UpdateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReplyValidationError{}

// Validate checks the field values on UserStruct with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStruct with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserStructMultiError, or
// nil if none found.
func (m *UserStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UserStructValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Email

	// no validation rules for Username

	if len(errors) > 0 {
		return UserStructMultiError(errors)
	}

	return nil
}

func (m *UserStruct) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UserStructMultiError is an error wrapping multiple validation errors
// returned by UserStruct.ValidateAll() if the designated constraints aren't met.
type UserStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStructMultiError) AllErrors() []error { return m }

// UserStructValidationError is the validation error returned by
// UserStruct.Validate if the designated constraints aren't met.
type UserStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStructValidationError) ErrorName() string { return "UserStructValidationError" }

// Error satisfies the builtin error interface
func (e UserStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStructValidationError{}

// Validate checks the field values on GetFileMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileMetaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileMetaRequestMultiError, or nil if none found.
func (m *GetFileMetaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileMetaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetFileMetaRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = GetFileMetaRequestValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFileMetaRequestMultiError(errors)
	}

	return nil
}

func (m *GetFileMetaRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetFileMetaRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileMetaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileMetaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileMetaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileMetaRequestMultiError) AllErrors() []error { return m }

// GetFileMetaRequestValidationError is the validation error returned by
// GetFileMetaRequest.Validate if the designated constraints aren't met.
type GetFileMetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileMetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileMetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileMetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileMetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileMetaRequestValidationError) ErrorName() string {
	return "GetFileMetaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileMetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileMetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileMetaRequestValidationError{}

// Validate checks the field values on GetFileMetaReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFileMetaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileMetaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileMetaReplyMultiError, or nil if none found.
func (m *GetFileMetaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileMetaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = GetFileMetaReplyValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FileSha_1

	// no validation rules for FileSize

	// no validation rules for FileAddr

	// no validation rules for Type

	if len(errors) > 0 {
		return GetFileMetaReplyMultiError(errors)
	}

	return nil
}

func (m *GetFileMetaReply) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetFileMetaReplyMultiError is an error wrapping multiple validation errors
// returned by GetFileMetaReply.ValidateAll() if the designated constraints
// aren't met.
type GetFileMetaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileMetaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileMetaReplyMultiError) AllErrors() []error { return m }

// GetFileMetaReplyValidationError is the validation error returned by
// GetFileMetaReply.Validate if the designated constraints aren't met.
type GetFileMetaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileMetaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileMetaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileMetaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileMetaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileMetaReplyValidationError) ErrorName() string { return "GetFileMetaReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetFileMetaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileMetaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileMetaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileMetaReplyValidationError{}

// Validate checks the field values on GetFileMetaByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileMetaByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileMetaByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileMetaByUserIdRequestMultiError, or nil if none found.
func (m *GetFileMetaByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileMetaByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetFileMetaByUserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFileMetaByUserIdRequestMultiError(errors)
	}

	return nil
}

func (m *GetFileMetaByUserIdRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetFileMetaByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetFileMetaByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFileMetaByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileMetaByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileMetaByUserIdRequestMultiError) AllErrors() []error { return m }

// GetFileMetaByUserIdRequestValidationError is the validation error returned
// by GetFileMetaByUserIdRequest.Validate if the designated constraints aren't met.
type GetFileMetaByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileMetaByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileMetaByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileMetaByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileMetaByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileMetaByUserIdRequestValidationError) ErrorName() string {
	return "GetFileMetaByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileMetaByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileMetaByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileMetaByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileMetaByUserIdRequestValidationError{}

// Validate checks the field values on GetFileMetaByUserIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileMetaByUserIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileMetaByUserIdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileMetaByUserIdReplyMultiError, or nil if none found.
func (m *GetFileMetaByUserIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileMetaByUserIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFileMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFileMetaByUserIdReplyValidationError{
						field:  fmt.Sprintf("FileMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFileMetaByUserIdReplyValidationError{
						field:  fmt.Sprintf("FileMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFileMetaByUserIdReplyValidationError{
					field:  fmt.Sprintf("FileMetadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFileMetaByUserIdReplyMultiError(errors)
	}

	return nil
}

// GetFileMetaByUserIdReplyMultiError is an error wrapping multiple validation
// errors returned by GetFileMetaByUserIdReply.ValidateAll() if the designated
// constraints aren't met.
type GetFileMetaByUserIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileMetaByUserIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileMetaByUserIdReplyMultiError) AllErrors() []error { return m }

// GetFileMetaByUserIdReplyValidationError is the validation error returned by
// GetFileMetaByUserIdReply.Validate if the designated constraints aren't met.
type GetFileMetaByUserIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileMetaByUserIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileMetaByUserIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileMetaByUserIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileMetaByUserIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileMetaByUserIdReplyValidationError) ErrorName() string {
	return "GetFileMetaByUserIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileMetaByUserIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileMetaByUserIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileMetaByUserIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileMetaByUserIdReplyValidationError{}

// Validate checks the field values on DeleteFileMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileMetadataRequestMultiError, or nil if none found.
func (m *DeleteFileMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteFileMetadataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = DeleteFileMetadataRequestValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFileMetadataRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteFileMetadataRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteFileMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFileMetadataRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteFileMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileMetadataRequestMultiError) AllErrors() []error { return m }

// DeleteFileMetadataRequestValidationError is the validation error returned by
// DeleteFileMetadataRequest.Validate if the designated constraints aren't met.
type DeleteFileMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileMetadataRequestValidationError) ErrorName() string {
	return "DeleteFileMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileMetadataRequestValidationError{}

// Validate checks the field values on DeleteFileMetadataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileMetadataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileMetadataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileMetadataReplyMultiError, or nil if none found.
func (m *DeleteFileMetadataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileMetadataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFileMetadataReplyMultiError(errors)
	}

	return nil
}

// DeleteFileMetadataReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteFileMetadataReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteFileMetadataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileMetadataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileMetadataReplyMultiError) AllErrors() []error { return m }

// DeleteFileMetadataReplyValidationError is the validation error returned by
// DeleteFileMetadataReply.Validate if the designated constraints aren't met.
type DeleteFileMetadataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileMetadataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileMetadataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileMetadataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileMetadataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileMetadataReplyValidationError) ErrorName() string {
	return "DeleteFileMetadataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileMetadataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileMetadataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileMetadataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileMetadataReplyValidationError{}

// Validate checks the field values on DetectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DetectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DetectRequestMultiError, or
// nil if none found.
func (m *DetectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DetectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DetectRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = DetectRequestValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DetectRequestMultiError(errors)
	}

	return nil
}

func (m *DetectRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DetectRequestMultiError is an error wrapping multiple validation errors
// returned by DetectRequest.ValidateAll() if the designated constraints
// aren't met.
type DetectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetectRequestMultiError) AllErrors() []error { return m }

// DetectRequestValidationError is the validation error returned by
// DetectRequest.Validate if the designated constraints aren't met.
type DetectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetectRequestValidationError) ErrorName() string { return "DetectRequestValidationError" }

// Error satisfies the builtin error interface
func (e DetectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetectRequestValidationError{}

// Validate checks the field values on DetectReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DetectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetectReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DetectReplyMultiError, or
// nil if none found.
func (m *DetectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DetectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetArtifactId()); err != nil {
		err = DetectReplyValidationError{
			field:  "ArtifactId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DetectReplyMultiError(errors)
	}

	return nil
}

func (m *DetectReply) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DetectReplyMultiError is an error wrapping multiple validation errors
// returned by DetectReply.ValidateAll() if the designated constraints aren't met.
type DetectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetectReplyMultiError) AllErrors() []error { return m }

// DetectReplyValidationError is the validation error returned by
// DetectReply.Validate if the designated constraints aren't met.
type DetectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetectReplyValidationError) ErrorName() string { return "DetectReplyValidationError" }

// Error satisfies the builtin error interface
func (e DetectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetectReplyValidationError{}

// Validate checks the field values on ConfusionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConfusionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfusionRequestMultiError, or nil if none found.
func (m *ConfusionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfusionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ConfusionRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = ConfusionRequestValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConfusionRequestMultiError(errors)
	}

	return nil
}

func (m *ConfusionRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ConfusionRequestMultiError is an error wrapping multiple validation errors
// returned by ConfusionRequest.ValidateAll() if the designated constraints
// aren't met.
type ConfusionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfusionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfusionRequestMultiError) AllErrors() []error { return m }

// ConfusionRequestValidationError is the validation error returned by
// ConfusionRequest.Validate if the designated constraints aren't met.
type ConfusionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfusionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfusionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfusionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfusionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfusionRequestValidationError) ErrorName() string { return "ConfusionRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConfusionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfusionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfusionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfusionRequestValidationError{}

// Validate checks the field values on ConfusionReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfusionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfusionReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfusionReplyMultiError,
// or nil if none found.
func (m *ConfusionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfusionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetArtifactId()); err != nil {
		err = ConfusionReplyValidationError{
			field:  "ArtifactId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = ConfusionReplyValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetAffiliatedFileId()); err != nil {
		err = ConfusionReplyValidationError{
			field:  "AffiliatedFileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Method

	if len(errors) > 0 {
		return ConfusionReplyMultiError(errors)
	}

	return nil
}

func (m *ConfusionReply) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ConfusionReplyMultiError is an error wrapping multiple validation errors
// returned by ConfusionReply.ValidateAll() if the designated constraints
// aren't met.
type ConfusionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfusionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfusionReplyMultiError) AllErrors() []error { return m }

// ConfusionReplyValidationError is the validation error returned by
// ConfusionReply.Validate if the designated constraints aren't met.
type ConfusionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfusionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfusionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfusionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfusionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfusionReplyValidationError) ErrorName() string { return "ConfusionReplyValidationError" }

// Error satisfies the builtin error interface
func (e ConfusionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfusionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfusionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfusionReplyValidationError{}

// Validate checks the field values on PackerRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PackerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PackerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PackerRequestMultiError, or
// nil if none found.
func (m *PackerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PackerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = PackerRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = PackerRequestValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PackerRequestMultiError(errors)
	}

	return nil
}

func (m *PackerRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PackerRequestMultiError is an error wrapping multiple validation errors
// returned by PackerRequest.ValidateAll() if the designated constraints
// aren't met.
type PackerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackerRequestMultiError) AllErrors() []error { return m }

// PackerRequestValidationError is the validation error returned by
// PackerRequest.Validate if the designated constraints aren't met.
type PackerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackerRequestValidationError) ErrorName() string { return "PackerRequestValidationError" }

// Error satisfies the builtin error interface
func (e PackerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackerRequestValidationError{}

// Validate checks the field values on PackerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PackerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PackerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PackerReplyMultiError, or
// nil if none found.
func (m *PackerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PackerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetArtifactId()); err != nil {
		err = PackerReplyValidationError{
			field:  "ArtifactId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = PackerReplyValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetAffiliatedFileId()); err != nil {
		err = PackerReplyValidationError{
			field:  "AffiliatedFileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Method

	if len(errors) > 0 {
		return PackerReplyMultiError(errors)
	}

	return nil
}

func (m *PackerReply) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PackerReplyMultiError is an error wrapping multiple validation errors
// returned by PackerReply.ValidateAll() if the designated constraints aren't met.
type PackerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackerReplyMultiError) AllErrors() []error { return m }

// PackerReplyValidationError is the validation error returned by
// PackerReply.Validate if the designated constraints aren't met.
type PackerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackerReplyValidationError) ErrorName() string { return "PackerReplyValidationError" }

// Error satisfies the builtin error interface
func (e PackerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackerReplyValidationError{}

// Validate checks the field values on GetArtifactMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArtifactMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtifactMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtifactMetadataRequestMultiError, or nil if none found.
func (m *GetArtifactMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtifactMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetArtifactMetadataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetArtifactId()); err != nil {
		err = GetArtifactMetadataRequestValidationError{
			field:  "ArtifactId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArtifactMetadataRequestMultiError(errors)
	}

	return nil
}

func (m *GetArtifactMetadataRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetArtifactMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by GetArtifactMetadataRequest.ValidateAll() if
// the designated constraints aren't met.
type GetArtifactMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtifactMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtifactMetadataRequestMultiError) AllErrors() []error { return m }

// GetArtifactMetadataRequestValidationError is the validation error returned
// by GetArtifactMetadataRequest.Validate if the designated constraints aren't met.
type GetArtifactMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactMetadataRequestValidationError) ErrorName() string {
	return "GetArtifactMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactMetadataRequestValidationError{}

// Validate checks the field values on GetArtifactMetadataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArtifactMetadataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtifactMetadataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtifactMetadataReplyMultiError, or nil if none found.
func (m *GetArtifactMetadataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtifactMetadataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetArtifactId()); err != nil {
		err = GetArtifactMetadataReplyValidationError{
			field:  "ArtifactId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = GetArtifactMetadataReplyValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetAffiliatedFileId()); err != nil {
		err = GetArtifactMetadataReplyValidationError{
			field:  "AffiliatedFileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Method

	if len(errors) > 0 {
		return GetArtifactMetadataReplyMultiError(errors)
	}

	return nil
}

func (m *GetArtifactMetadataReply) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetArtifactMetadataReplyMultiError is an error wrapping multiple validation
// errors returned by GetArtifactMetadataReply.ValidateAll() if the designated
// constraints aren't met.
type GetArtifactMetadataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtifactMetadataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtifactMetadataReplyMultiError) AllErrors() []error { return m }

// GetArtifactMetadataReplyValidationError is the validation error returned by
// GetArtifactMetadataReply.Validate if the designated constraints aren't met.
type GetArtifactMetadataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactMetadataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactMetadataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactMetadataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactMetadataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactMetadataReplyValidationError) ErrorName() string {
	return "GetArtifactMetadataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactMetadataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactMetadataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactMetadataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactMetadataReplyValidationError{}

// Validate checks the field values on GetArtifactMetadataByFileIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetArtifactMetadataByFileIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtifactMetadataByFileIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetArtifactMetadataByFileIdRequestMultiError, or nil if none found.
func (m *GetArtifactMetadataByFileIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtifactMetadataByFileIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetArtifactMetadataByFileIdRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFileId()); err != nil {
		err = GetArtifactMetadataByFileIdRequestValidationError{
			field:  "FileId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArtifactMetadataByFileIdRequestMultiError(errors)
	}

	return nil
}

func (m *GetArtifactMetadataByFileIdRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetArtifactMetadataByFileIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetArtifactMetadataByFileIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetArtifactMetadataByFileIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtifactMetadataByFileIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtifactMetadataByFileIdRequestMultiError) AllErrors() []error { return m }

// GetArtifactMetadataByFileIdRequestValidationError is the validation error
// returned by GetArtifactMetadataByFileIdRequest.Validate if the designated
// constraints aren't met.
type GetArtifactMetadataByFileIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactMetadataByFileIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactMetadataByFileIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactMetadataByFileIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactMetadataByFileIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactMetadataByFileIdRequestValidationError) ErrorName() string {
	return "GetArtifactMetadataByFileIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactMetadataByFileIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactMetadataByFileIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactMetadataByFileIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactMetadataByFileIdRequestValidationError{}

// Validate checks the field values on GetArtifactMetadataByFileIdReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetArtifactMetadataByFileIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtifactMetadataByFileIdReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArtifactMetadataByFileIdReplyMultiError, or nil if none found.
func (m *GetArtifactMetadataByFileIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtifactMetadataByFileIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArtifactMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArtifactMetadataByFileIdReplyValidationError{
						field:  fmt.Sprintf("ArtifactMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArtifactMetadataByFileIdReplyValidationError{
						field:  fmt.Sprintf("ArtifactMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArtifactMetadataByFileIdReplyValidationError{
					field:  fmt.Sprintf("ArtifactMetadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArtifactMetadataByFileIdReplyMultiError(errors)
	}

	return nil
}

// GetArtifactMetadataByFileIdReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetArtifactMetadataByFileIdReply.ValidateAll() if the designated
// constraints aren't met.
type GetArtifactMetadataByFileIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtifactMetadataByFileIdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtifactMetadataByFileIdReplyMultiError) AllErrors() []error { return m }

// GetArtifactMetadataByFileIdReplyValidationError is the validation error
// returned by GetArtifactMetadataByFileIdReply.Validate if the designated
// constraints aren't met.
type GetArtifactMetadataByFileIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactMetadataByFileIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactMetadataByFileIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactMetadataByFileIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactMetadataByFileIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactMetadataByFileIdReplyValidationError) ErrorName() string {
	return "GetArtifactMetadataByFileIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactMetadataByFileIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactMetadataByFileIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactMetadataByFileIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactMetadataByFileIdReplyValidationError{}

// Validate checks the field values on DeleteArtifactMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArtifactMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArtifactMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteArtifactMetadataRequestMultiError, or nil if none found.
func (m *DeleteArtifactMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArtifactMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteArtifactMetadataRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetArtifactId()); err != nil {
		err = DeleteArtifactMetadataRequestValidationError{
			field:  "ArtifactId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteArtifactMetadataRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteArtifactMetadataRequest) _validateUuid(uuid string) error {
	if matched := _bugu_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteArtifactMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteArtifactMetadataRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteArtifactMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArtifactMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArtifactMetadataRequestMultiError) AllErrors() []error { return m }

// DeleteArtifactMetadataRequestValidationError is the validation error
// returned by DeleteArtifactMetadataRequest.Validate if the designated
// constraints aren't met.
type DeleteArtifactMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArtifactMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArtifactMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArtifactMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArtifactMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArtifactMetadataRequestValidationError) ErrorName() string {
	return "DeleteArtifactMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArtifactMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArtifactMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArtifactMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArtifactMetadataRequestValidationError{}

// Validate checks the field values on DeleteArtifactMetadataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArtifactMetadataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArtifactMetadataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArtifactMetadataReplyMultiError, or nil if none found.
func (m *DeleteArtifactMetadataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArtifactMetadataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteArtifactMetadataReplyMultiError(errors)
	}

	return nil
}

// DeleteArtifactMetadataReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteArtifactMetadataReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteArtifactMetadataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArtifactMetadataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArtifactMetadataReplyMultiError) AllErrors() []error { return m }

// DeleteArtifactMetadataReplyValidationError is the validation error returned
// by DeleteArtifactMetadataReply.Validate if the designated constraints
// aren't met.
type DeleteArtifactMetadataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArtifactMetadataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArtifactMetadataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArtifactMetadataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArtifactMetadataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArtifactMetadataReplyValidationError) ErrorName() string {
	return "DeleteArtifactMetadataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArtifactMetadataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArtifactMetadataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArtifactMetadataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArtifactMetadataReplyValidationError{}

// Validate checks the field values on RegisterRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequest_UserMultiError, or nil if none found.
func (m *RegisterRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterRequest_UserMultiError(errors)
	}

	return nil
}

// RegisterRequest_UserMultiError is an error wrapping multiple validation
// errors returned by RegisterRequest_User.ValidateAll() if the designated
// constraints aren't met.
type RegisterRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequest_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequest_UserMultiError) AllErrors() []error { return m }

// RegisterRequest_UserValidationError is the validation error returned by
// RegisterRequest_User.Validate if the designated constraints aren't met.
type RegisterRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequest_UserValidationError) ErrorName() string {
	return "RegisterRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequest_UserValidationError{}

// Validate checks the field values on LoginRequest_User with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginRequest_UserMultiError, or nil if none found.
func (m *LoginRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequest_UserMultiError(errors)
	}

	return nil
}

// LoginRequest_UserMultiError is an error wrapping multiple validation errors
// returned by LoginRequest_User.ValidateAll() if the designated constraints
// aren't met.
type LoginRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequest_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequest_UserMultiError) AllErrors() []error { return m }

// LoginRequest_UserValidationError is the validation error returned by
// LoginRequest_User.Validate if the designated constraints aren't met.
type LoginRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_UserValidationError) ErrorName() string {
	return "LoginRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_UserValidationError{}

// Validate checks the field values on UpdateUserRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequest_UserMultiError, or nil if none found.
func (m *UpdateUserRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return UpdateUserRequest_UserMultiError(errors)
	}

	return nil
}

// UpdateUserRequest_UserMultiError is an error wrapping multiple validation
// errors returned by UpdateUserRequest_User.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequest_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequest_UserMultiError) AllErrors() []error { return m }

// UpdateUserRequest_UserValidationError is the validation error returned by
// UpdateUserRequest_User.Validate if the designated constraints aren't met.
type UpdateUserRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequest_UserValidationError) ErrorName() string {
	return "UpdateUserRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequest_UserValidationError{}
