// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bugu.proto
#ifndef GRPC_bugu_2eproto__INCLUDED
#define GRPC_bugu_2eproto__INCLUDED

#include "bugu.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bugu {
namespace service {
namespace v1 {

class Bugu final {
 public:
  static constexpr char const* service_full_name() {
    return "bugu.service.v1.Bugu";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::bugu::service::v1::RegisterReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::RegisterReply>> AsyncRegister(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::RegisterReply>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::RegisterReply>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::RegisterReply>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::bugu::service::v1::LoginReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::LoginReply>> AsyncLogin(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::LoginReply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::LoginReply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::LoginReply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::bugu::service::v1::GetCurrentUserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetCurrentUserReply>> AsyncGetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetCurrentUserReply>>(AsyncGetCurrentUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetCurrentUserReply>> PrepareAsyncGetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetCurrentUserReply>>(PrepareAsyncGetCurrentUserRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::bugu::service::v1::UpdateUserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::UpdateUserReply>> AsyncUpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::UpdateUserReply>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::UpdateUserReply>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::UpdateUserReply>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status Detect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::bugu::service::v1::DetectReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::DetectReply>> AsyncDetect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::DetectReply>>(AsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::DetectReply>> PrepareAsyncDetect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::DetectReply>>(PrepareAsyncDetectRaw(context, request, cq));
    }
    virtual ::grpc::Status Confusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::bugu::service::v1::ConfusionReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::ConfusionReply>> AsyncConfusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::ConfusionReply>>(AsyncConfusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::ConfusionReply>> PrepareAsyncConfusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::ConfusionReply>>(PrepareAsyncConfusionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::bugu::service::v1::GetArtifactMetadataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataReply>> AsyncGetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataReply>>(AsyncGetArtifactMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataReply>> PrepareAsyncGetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataReply>>(PrepareAsyncGetArtifactMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>> AsyncGetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>>(AsyncGetArtifactMetadataByFileIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>> PrepareAsyncGetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>>(PrepareAsyncGetArtifactMetadataByFileIdRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Register(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest* request, ::bugu::service::v1::RegisterReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest* request, ::bugu::service::v1::RegisterReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest* request, ::bugu::service::v1::LoginReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest* request, ::bugu::service::v1::LoginReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest* request, ::bugu::service::v1::GetCurrentUserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest* request, ::bugu::service::v1::GetCurrentUserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest* request, ::bugu::service::v1::UpdateUserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest* request, ::bugu::service::v1::UpdateUserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest* request, ::bugu::service::v1::DetectReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Detect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest* request, ::bugu::service::v1::DetectReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Confusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest* request, ::bugu::service::v1::ConfusionReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Confusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest* request, ::bugu::service::v1::ConfusionReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest* request, ::bugu::service::v1::GetArtifactMetadataReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest* request, ::bugu::service::v1::GetArtifactMetadataReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* request, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* request, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::RegisterReply>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::RegisterReply>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::LoginReply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::LoginReply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetCurrentUserReply>* AsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetCurrentUserReply>* PrepareAsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::UpdateUserReply>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::UpdateUserReply>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::DetectReply>* AsyncDetectRaw(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::DetectReply>* PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::ConfusionReply>* AsyncConfusionRaw(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::ConfusionReply>* PrepareAsyncConfusionRaw(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataReply>* AsyncGetArtifactMetadataRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataReply>* PrepareAsyncGetArtifactMetadataRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>* AsyncGetArtifactMetadataByFileIdRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>* PrepareAsyncGetArtifactMetadataByFileIdRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Register(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::bugu::service::v1::RegisterReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::RegisterReply>> AsyncRegister(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::RegisterReply>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::RegisterReply>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::RegisterReply>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::bugu::service::v1::LoginReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::LoginReply>> AsyncLogin(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::LoginReply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::LoginReply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::LoginReply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::bugu::service::v1::GetCurrentUserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetCurrentUserReply>> AsyncGetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetCurrentUserReply>>(AsyncGetCurrentUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetCurrentUserReply>> PrepareAsyncGetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetCurrentUserReply>>(PrepareAsyncGetCurrentUserRaw(context, request, cq));
    }
    ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::bugu::service::v1::UpdateUserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::UpdateUserReply>> AsyncUpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::UpdateUserReply>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::UpdateUserReply>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::UpdateUserReply>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    ::grpc::Status Detect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::bugu::service::v1::DetectReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::DetectReply>> AsyncDetect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::DetectReply>>(AsyncDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::DetectReply>> PrepareAsyncDetect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::DetectReply>>(PrepareAsyncDetectRaw(context, request, cq));
    }
    ::grpc::Status Confusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::bugu::service::v1::ConfusionReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::ConfusionReply>> AsyncConfusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::ConfusionReply>>(AsyncConfusionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::ConfusionReply>> PrepareAsyncConfusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::ConfusionReply>>(PrepareAsyncConfusionRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::bugu::service::v1::GetArtifactMetadataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataReply>> AsyncGetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataReply>>(AsyncGetArtifactMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataReply>> PrepareAsyncGetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataReply>>(PrepareAsyncGetArtifactMetadataRaw(context, request, cq));
    }
    ::grpc::Status GetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>> AsyncGetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>>(AsyncGetArtifactMetadataByFileIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>> PrepareAsyncGetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>>(PrepareAsyncGetArtifactMetadataByFileIdRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest* request, ::bugu::service::v1::RegisterReply* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest* request, ::bugu::service::v1::RegisterReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest* request, ::bugu::service::v1::LoginReply* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest* request, ::bugu::service::v1::LoginReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest* request, ::bugu::service::v1::GetCurrentUserReply* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentUser(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest* request, ::bugu::service::v1::GetCurrentUserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest* request, ::bugu::service::v1::UpdateUserReply* response, std::function<void(::grpc::Status)>) override;
      void UpdateUser(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest* request, ::bugu::service::v1::UpdateUserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Detect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest* request, ::bugu::service::v1::DetectReply* response, std::function<void(::grpc::Status)>) override;
      void Detect(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest* request, ::bugu::service::v1::DetectReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Confusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest* request, ::bugu::service::v1::ConfusionReply* response, std::function<void(::grpc::Status)>) override;
      void Confusion(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest* request, ::bugu::service::v1::ConfusionReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest* request, ::bugu::service::v1::GetArtifactMetadataReply* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactMetadata(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest* request, ::bugu::service::v1::GetArtifactMetadataReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* request, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* response, std::function<void(::grpc::Status)>) override;
      void GetArtifactMetadataByFileId(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* request, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::RegisterReply>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::RegisterReply>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::bugu::service::v1::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::LoginReply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::LoginReply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::bugu::service::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetCurrentUserReply>* AsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetCurrentUserReply>* PrepareAsyncGetCurrentUserRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetCurrentUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::UpdateUserReply>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::UpdateUserReply>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::bugu::service::v1::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::DetectReply>* AsyncDetectRaw(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::DetectReply>* PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::bugu::service::v1::DetectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::ConfusionReply>* AsyncConfusionRaw(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::ConfusionReply>* PrepareAsyncConfusionRaw(::grpc::ClientContext* context, const ::bugu::service::v1::ConfusionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataReply>* AsyncGetArtifactMetadataRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataReply>* PrepareAsyncGetArtifactMetadataRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>* AsyncGetArtifactMetadataByFileIdRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>* PrepareAsyncGetArtifactMetadataByFileIdRaw(::grpc::ClientContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentUser_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_Detect_;
    const ::grpc::internal::RpcMethod rpcmethod_Confusion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifactMetadataByFileId_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::bugu::service::v1::RegisterRequest* request, ::bugu::service::v1::RegisterReply* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::bugu::service::v1::LoginRequest* request, ::bugu::service::v1::LoginReply* response);
    virtual ::grpc::Status GetCurrentUser(::grpc::ServerContext* context, const ::bugu::service::v1::GetCurrentUserRequest* request, ::bugu::service::v1::GetCurrentUserReply* response);
    virtual ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::bugu::service::v1::UpdateUserRequest* request, ::bugu::service::v1::UpdateUserReply* response);
    virtual ::grpc::Status Detect(::grpc::ServerContext* context, const ::bugu::service::v1::DetectRequest* request, ::bugu::service::v1::DetectReply* response);
    virtual ::grpc::Status Confusion(::grpc::ServerContext* context, const ::bugu::service::v1::ConfusionRequest* request, ::bugu::service::v1::ConfusionReply* response);
    virtual ::grpc::Status GetArtifactMetadata(::grpc::ServerContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest* request, ::bugu::service::v1::GetArtifactMetadataReply* response);
    virtual ::grpc::Status GetArtifactMetadataByFileId(::grpc::ServerContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* request, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::RegisterRequest* /*request*/, ::bugu::service::v1::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::bugu::service::v1::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::bugu::service::v1::RegisterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::LoginRequest* /*request*/, ::bugu::service::v1::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::bugu::service::v1::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::bugu::service::v1::LoginReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetCurrentUserRequest* /*request*/, ::bugu::service::v1::GetCurrentUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentUser(::grpc::ServerContext* context, ::bugu::service::v1::GetCurrentUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::bugu::service::v1::GetCurrentUserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::UpdateUserRequest* /*request*/, ::bugu::service::v1::UpdateUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::bugu::service::v1::UpdateUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::bugu::service::v1::UpdateUserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Detect() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::DetectRequest* /*request*/, ::bugu::service::v1::DetectReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetect(::grpc::ServerContext* context, ::bugu::service::v1::DetectRequest* request, ::grpc::ServerAsyncResponseWriter< ::bugu::service::v1::DetectReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Confusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Confusion() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Confusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Confusion(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::ConfusionRequest* /*request*/, ::bugu::service::v1::ConfusionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfusion(::grpc::ServerContext* context, ::bugu::service::v1::ConfusionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bugu::service::v1::ConfusionReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactMetadata() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetArtifactMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadata(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactMetadata(::grpc::ServerContext* context, ::bugu::service::v1::GetArtifactMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::bugu::service::v1::GetArtifactMetadataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifactMetadataByFileId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtifactMetadataByFileId() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetArtifactMetadataByFileId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadataByFileId(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactMetadataByFileId(::grpc::ServerContext* context, ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::bugu::service::v1::GetArtifactMetadataByFileIdReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Login<WithAsyncMethod_GetCurrentUser<WithAsyncMethod_UpdateUser<WithAsyncMethod_Detect<WithAsyncMethod_Confusion<WithAsyncMethod_GetArtifactMetadata<WithAsyncMethod_GetArtifactMetadataByFileId<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::RegisterRequest, ::bugu::service::v1::RegisterReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bugu::service::v1::RegisterRequest* request, ::bugu::service::v1::RegisterReply* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::bugu::service::v1::RegisterRequest, ::bugu::service::v1::RegisterReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::RegisterRequest, ::bugu::service::v1::RegisterReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::RegisterRequest* /*request*/, ::bugu::service::v1::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::bugu::service::v1::RegisterRequest* /*request*/, ::bugu::service::v1::RegisterReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::LoginRequest, ::bugu::service::v1::LoginReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bugu::service::v1::LoginRequest* request, ::bugu::service::v1::LoginReply* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::bugu::service::v1::LoginRequest, ::bugu::service::v1::LoginReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::LoginRequest, ::bugu::service::v1::LoginReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::LoginRequest* /*request*/, ::bugu::service::v1::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::bugu::service::v1::LoginRequest* /*request*/, ::bugu::service::v1::LoginReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::GetCurrentUserRequest, ::bugu::service::v1::GetCurrentUserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bugu::service::v1::GetCurrentUserRequest* request, ::bugu::service::v1::GetCurrentUserReply* response) { return this->GetCurrentUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentUser(
        ::grpc::MessageAllocator< ::bugu::service::v1::GetCurrentUserRequest, ::bugu::service::v1::GetCurrentUserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::GetCurrentUserRequest, ::bugu::service::v1::GetCurrentUserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetCurrentUserRequest* /*request*/, ::bugu::service::v1::GetCurrentUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentUser(
      ::grpc::CallbackServerContext* /*context*/, const ::bugu::service::v1::GetCurrentUserRequest* /*request*/, ::bugu::service::v1::GetCurrentUserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::UpdateUserRequest, ::bugu::service::v1::UpdateUserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bugu::service::v1::UpdateUserRequest* request, ::bugu::service::v1::UpdateUserReply* response) { return this->UpdateUser(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUser(
        ::grpc::MessageAllocator< ::bugu::service::v1::UpdateUserRequest, ::bugu::service::v1::UpdateUserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::UpdateUserRequest, ::bugu::service::v1::UpdateUserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::UpdateUserRequest* /*request*/, ::bugu::service::v1::UpdateUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::bugu::service::v1::UpdateUserRequest* /*request*/, ::bugu::service::v1::UpdateUserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Detect() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::DetectRequest, ::bugu::service::v1::DetectReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bugu::service::v1::DetectRequest* request, ::bugu::service::v1::DetectReply* response) { return this->Detect(context, request, response); }));}
    void SetMessageAllocatorFor_Detect(
        ::grpc::MessageAllocator< ::bugu::service::v1::DetectRequest, ::bugu::service::v1::DetectReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::DetectRequest, ::bugu::service::v1::DetectReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::DetectRequest* /*request*/, ::bugu::service::v1::DetectReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Detect(
      ::grpc::CallbackServerContext* /*context*/, const ::bugu::service::v1::DetectRequest* /*request*/, ::bugu::service::v1::DetectReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Confusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Confusion() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::ConfusionRequest, ::bugu::service::v1::ConfusionReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bugu::service::v1::ConfusionRequest* request, ::bugu::service::v1::ConfusionReply* response) { return this->Confusion(context, request, response); }));}
    void SetMessageAllocatorFor_Confusion(
        ::grpc::MessageAllocator< ::bugu::service::v1::ConfusionRequest, ::bugu::service::v1::ConfusionReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::ConfusionRequest, ::bugu::service::v1::ConfusionReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Confusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Confusion(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::ConfusionRequest* /*request*/, ::bugu::service::v1::ConfusionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Confusion(
      ::grpc::CallbackServerContext* /*context*/, const ::bugu::service::v1::ConfusionRequest* /*request*/, ::bugu::service::v1::ConfusionReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactMetadata() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::GetArtifactMetadataRequest, ::bugu::service::v1::GetArtifactMetadataReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bugu::service::v1::GetArtifactMetadataRequest* request, ::bugu::service::v1::GetArtifactMetadataReply* response) { return this->GetArtifactMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactMetadata(
        ::grpc::MessageAllocator< ::bugu::service::v1::GetArtifactMetadataRequest, ::bugu::service::v1::GetArtifactMetadataReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::GetArtifactMetadataRequest, ::bugu::service::v1::GetArtifactMetadataReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadata(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetArtifactMetadataByFileId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetArtifactMetadataByFileId() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::GetArtifactMetadataByFileIdRequest, ::bugu::service::v1::GetArtifactMetadataByFileIdReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* request, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* response) { return this->GetArtifactMetadataByFileId(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtifactMetadataByFileId(
        ::grpc::MessageAllocator< ::bugu::service::v1::GetArtifactMetadataByFileIdRequest, ::bugu::service::v1::GetArtifactMetadataByFileIdReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bugu::service::v1::GetArtifactMetadataByFileIdRequest, ::bugu::service::v1::GetArtifactMetadataByFileIdReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetArtifactMetadataByFileId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadataByFileId(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactMetadataByFileId(
      ::grpc::CallbackServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Register<WithCallbackMethod_Login<WithCallbackMethod_GetCurrentUser<WithCallbackMethod_UpdateUser<WithCallbackMethod_Detect<WithCallbackMethod_Confusion<WithCallbackMethod_GetArtifactMetadata<WithCallbackMethod_GetArtifactMetadataByFileId<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::RegisterRequest* /*request*/, ::bugu::service::v1::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::LoginRequest* /*request*/, ::bugu::service::v1::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetCurrentUserRequest* /*request*/, ::bugu::service::v1::GetCurrentUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::UpdateUserRequest* /*request*/, ::bugu::service::v1::UpdateUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Detect() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::DetectRequest* /*request*/, ::bugu::service::v1::DetectReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Confusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Confusion() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Confusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Confusion(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::ConfusionRequest* /*request*/, ::bugu::service::v1::ConfusionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactMetadata() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetArtifactMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadata(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifactMetadataByFileId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtifactMetadataByFileId() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetArtifactMetadataByFileId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadataByFileId(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::RegisterRequest* /*request*/, ::bugu::service::v1::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::LoginRequest* /*request*/, ::bugu::service::v1::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetCurrentUserRequest* /*request*/, ::bugu::service::v1::GetCurrentUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::UpdateUserRequest* /*request*/, ::bugu::service::v1::UpdateUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Detect() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::DetectRequest* /*request*/, ::bugu::service::v1::DetectReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Confusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Confusion() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Confusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Confusion(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::ConfusionRequest* /*request*/, ::bugu::service::v1::ConfusionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfusion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactMetadata() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetArtifactMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadata(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifactMetadataByFileId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtifactMetadataByFileId() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetArtifactMetadataByFileId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadataByFileId(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifactMetadataByFileId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::RegisterRequest* /*request*/, ::bugu::service::v1::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::LoginRequest* /*request*/, ::bugu::service::v1::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetCurrentUserRequest* /*request*/, ::bugu::service::v1::GetCurrentUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::UpdateUserRequest* /*request*/, ::bugu::service::v1::UpdateUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Detect() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Detect(context, request, response); }));
    }
    ~WithRawCallbackMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::DetectRequest* /*request*/, ::bugu::service::v1::DetectReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Detect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Confusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Confusion() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Confusion(context, request, response); }));
    }
    ~WithRawCallbackMethod_Confusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Confusion(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::ConfusionRequest* /*request*/, ::bugu::service::v1::ConfusionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Confusion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactMetadata() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadata(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetArtifactMetadataByFileId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetArtifactMetadataByFileId() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtifactMetadataByFileId(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetArtifactMetadataByFileId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifactMetadataByFileId(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetArtifactMetadataByFileId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bugu::service::v1::RegisterRequest, ::bugu::service::v1::RegisterReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bugu::service::v1::RegisterRequest, ::bugu::service::v1::RegisterReply>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::RegisterRequest* /*request*/, ::bugu::service::v1::RegisterReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bugu::service::v1::RegisterRequest,::bugu::service::v1::RegisterReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bugu::service::v1::LoginRequest, ::bugu::service::v1::LoginReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bugu::service::v1::LoginRequest, ::bugu::service::v1::LoginReply>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::LoginRequest* /*request*/, ::bugu::service::v1::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bugu::service::v1::LoginRequest,::bugu::service::v1::LoginReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bugu::service::v1::GetCurrentUserRequest, ::bugu::service::v1::GetCurrentUserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bugu::service::v1::GetCurrentUserRequest, ::bugu::service::v1::GetCurrentUserReply>* streamer) {
                       return this->StreamedGetCurrentUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetCurrentUserRequest* /*request*/, ::bugu::service::v1::GetCurrentUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bugu::service::v1::GetCurrentUserRequest,::bugu::service::v1::GetCurrentUserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bugu::service::v1::UpdateUserRequest, ::bugu::service::v1::UpdateUserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bugu::service::v1::UpdateUserRequest, ::bugu::service::v1::UpdateUserReply>* streamer) {
                       return this->StreamedUpdateUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::UpdateUserRequest* /*request*/, ::bugu::service::v1::UpdateUserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bugu::service::v1::UpdateUserRequest,::bugu::service::v1::UpdateUserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Detect() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bugu::service::v1::DetectRequest, ::bugu::service::v1::DetectReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bugu::service::v1::DetectRequest, ::bugu::service::v1::DetectReply>* streamer) {
                       return this->StreamedDetect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Detect(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::DetectRequest* /*request*/, ::bugu::service::v1::DetectReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bugu::service::v1::DetectRequest,::bugu::service::v1::DetectReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Confusion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Confusion() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bugu::service::v1::ConfusionRequest, ::bugu::service::v1::ConfusionReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bugu::service::v1::ConfusionRequest, ::bugu::service::v1::ConfusionReply>* streamer) {
                       return this->StreamedConfusion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Confusion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Confusion(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::ConfusionRequest* /*request*/, ::bugu::service::v1::ConfusionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfusion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bugu::service::v1::ConfusionRequest,::bugu::service::v1::ConfusionReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactMetadata() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bugu::service::v1::GetArtifactMetadataRequest, ::bugu::service::v1::GetArtifactMetadataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bugu::service::v1::GetArtifactMetadataRequest, ::bugu::service::v1::GetArtifactMetadataReply>* streamer) {
                       return this->StreamedGetArtifactMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactMetadata(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bugu::service::v1::GetArtifactMetadataRequest,::bugu::service::v1::GetArtifactMetadataReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifactMetadataByFileId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtifactMetadataByFileId() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bugu::service::v1::GetArtifactMetadataByFileIdRequest, ::bugu::service::v1::GetArtifactMetadataByFileIdReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bugu::service::v1::GetArtifactMetadataByFileIdRequest, ::bugu::service::v1::GetArtifactMetadataByFileIdReply>* streamer) {
                       return this->StreamedGetArtifactMetadataByFileId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtifactMetadataByFileId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifactMetadataByFileId(::grpc::ServerContext* /*context*/, const ::bugu::service::v1::GetArtifactMetadataByFileIdRequest* /*request*/, ::bugu::service::v1::GetArtifactMetadataByFileIdReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifactMetadataByFileId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bugu::service::v1::GetArtifactMetadataByFileIdRequest,::bugu::service::v1::GetArtifactMetadataByFileIdReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_GetCurrentUser<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_Detect<WithStreamedUnaryMethod_Confusion<WithStreamedUnaryMethod_GetArtifactMetadata<WithStreamedUnaryMethod_GetArtifactMetadataByFileId<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_GetCurrentUser<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_Detect<WithStreamedUnaryMethod_Confusion<WithStreamedUnaryMethod_GetArtifactMetadata<WithStreamedUnaryMethod_GetArtifactMetadataByFileId<Service > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace service
}  // namespace bugu


#endif  // GRPC_bugu_2eproto__INCLUDED
