// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/bugu_packer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuguPackerClient is the client API for BuguPacker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuguPackerClient interface {
	Packer(ctx context.Context, in *PackerRequest, opts ...grpc.CallOption) (*PackerReply, error)
}

type buguPackerClient struct {
	cc grpc.ClientConnInterface
}

func NewBuguPackerClient(cc grpc.ClientConnInterface) BuguPackerClient {
	return &buguPackerClient{cc}
}

func (c *buguPackerClient) Packer(ctx context.Context, in *PackerRequest, opts ...grpc.CallOption) (*PackerReply, error) {
	out := new(PackerReply)
	err := c.cc.Invoke(ctx, "/bugu_packer.service.v1.BuguPacker/Packer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuguPackerServer is the server API for BuguPacker service.
// All implementations must embed UnimplementedBuguPackerServer
// for forward compatibility
type BuguPackerServer interface {
	Packer(context.Context, *PackerRequest) (*PackerReply, error)
	mustEmbedUnimplementedBuguPackerServer()
}

// UnimplementedBuguPackerServer must be embedded to have forward compatible implementations.
type UnimplementedBuguPackerServer struct {
}

func (UnimplementedBuguPackerServer) Packer(context.Context, *PackerRequest) (*PackerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Packer not implemented")
}
func (UnimplementedBuguPackerServer) mustEmbedUnimplementedBuguPackerServer() {}

// UnsafeBuguPackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuguPackerServer will
// result in compilation errors.
type UnsafeBuguPackerServer interface {
	mustEmbedUnimplementedBuguPackerServer()
}

func RegisterBuguPackerServer(s grpc.ServiceRegistrar, srv BuguPackerServer) {
	s.RegisterService(&BuguPacker_ServiceDesc, srv)
}

func _BuguPacker_Packer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuguPackerServer).Packer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bugu_packer.service.v1.BuguPacker/Packer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuguPackerServer).Packer(ctx, req.(*PackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuguPacker_ServiceDesc is the grpc.ServiceDesc for BuguPacker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuguPacker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bugu_packer.service.v1.BuguPacker",
	HandlerType: (*BuguPackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Packer",
			Handler:    _BuguPacker_Packer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bugu_packer.proto",
}
