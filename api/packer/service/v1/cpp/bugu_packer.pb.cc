// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bugu_packer.proto

#include "bugu_packer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace bugu_packer {
namespace service {
namespace v1 {
constexpr PackerRequest::PackerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , size_(0u){}
struct PackerRequestDefaultTypeInternal {
  constexpr PackerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PackerRequestDefaultTypeInternal() {}
  union {
    PackerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PackerRequestDefaultTypeInternal _PackerRequest_default_instance_;
constexpr PackerReply::PackerReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , size_(0u){}
struct PackerReplyDefaultTypeInternal {
  constexpr PackerReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PackerReplyDefaultTypeInternal() {}
  union {
    PackerReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PackerReplyDefaultTypeInternal _PackerReply_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace bugu_packer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bugu_5fpacker_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bugu_5fpacker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bugu_5fpacker_2eproto = nullptr;

const uint32_t TableStruct_bugu_5fpacker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bugu_packer::service::v1::PackerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bugu_packer::service::v1::PackerRequest, data_),
  PROTOBUF_FIELD_OFFSET(::bugu_packer::service::v1::PackerRequest, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bugu_packer::service::v1::PackerReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bugu_packer::service::v1::PackerReply, data_),
  PROTOBUF_FIELD_OFFSET(::bugu_packer::service::v1::PackerReply, size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bugu_packer::service::v1::PackerRequest)},
  { 8, -1, -1, sizeof(::bugu_packer::service::v1::PackerReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bugu_packer::service::v1::_PackerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bugu_packer::service::v1::_PackerReply_default_instance_),
};

const char descriptor_table_protodef_bugu_5fpacker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021bugu_packer.proto\022\026bugu_packer.service"
  ".v1\"+\n\rPackerRequest\022\014\n\004data\030\001 \003(\014\022\014\n\004si"
  "ze\030\002 \001(\r\")\n\013PackerReply\022\014\n\004data\030\001 \003(\014\022\014\n"
  "\004size\030\002 \001(\r2d\n\nBuguPacker\022V\n\006Packer\022%.bu"
  "gu_packer.service.v1.PackerRequest\032#.bug"
  "u_packer.service.v1.PackerReply\"\000B2Z0git"
  "hub.com/hominsu/bugu/api/packer/service/"
  "v1;v1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bugu_5fpacker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bugu_5fpacker_2eproto = {
  false, false, 293, descriptor_table_protodef_bugu_5fpacker_2eproto, "bugu_packer.proto", 
  &descriptor_table_bugu_5fpacker_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_bugu_5fpacker_2eproto::offsets,
  file_level_metadata_bugu_5fpacker_2eproto, file_level_enum_descriptors_bugu_5fpacker_2eproto, file_level_service_descriptors_bugu_5fpacker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_bugu_5fpacker_2eproto_getter() {
  return &descriptor_table_bugu_5fpacker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_bugu_5fpacker_2eproto(&descriptor_table_bugu_5fpacker_2eproto);
namespace bugu_packer {
namespace service {
namespace v1 {

// ===================================================================

class PackerRequest::_Internal {
 public:
};

PackerRequest::PackerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bugu_packer.service.v1.PackerRequest)
}
PackerRequest::PackerRequest(const PackerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:bugu_packer.service.v1.PackerRequest)
}

inline void PackerRequest::SharedCtor() {
size_ = 0u;
}

PackerRequest::~PackerRequest() {
  // @@protoc_insertion_point(destructor:bugu_packer.service.v1.PackerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PackerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PackerRequest::ArenaDtor(void* object) {
  PackerRequest* _this = reinterpret_cast< PackerRequest* >(object);
  (void)_this;
}
void PackerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bugu_packer.service.v1.PackerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bugu_packer.service.v1.PackerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(1, s, target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bugu_packer.service.v1.PackerRequest)
  return target;
}

size_t PackerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bugu_packer.service.v1.PackerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_.Get(i));
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PackerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PackerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PackerRequest::GetClassData() const { return &_class_data_; }

void PackerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PackerRequest *>(to)->MergeFrom(
      static_cast<const PackerRequest &>(from));
}


void PackerRequest::MergeFrom(const PackerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bugu_packer.service.v1.PackerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PackerRequest::CopyFrom(const PackerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bugu_packer.service.v1.PackerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackerRequest::IsInitialized() const {
  return true;
}

void PackerRequest::InternalSwap(PackerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bugu_5fpacker_2eproto_getter, &descriptor_table_bugu_5fpacker_2eproto_once,
      file_level_metadata_bugu_5fpacker_2eproto[0]);
}

// ===================================================================

class PackerReply::_Internal {
 public:
};

PackerReply::PackerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bugu_packer.service.v1.PackerReply)
}
PackerReply::PackerReply(const PackerReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:bugu_packer.service.v1.PackerReply)
}

inline void PackerReply::SharedCtor() {
size_ = 0u;
}

PackerReply::~PackerReply() {
  // @@protoc_insertion_point(destructor:bugu_packer.service.v1.PackerReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PackerReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PackerReply::ArenaDtor(void* object) {
  PackerReply* _this = reinterpret_cast< PackerReply* >(object);
  (void)_this;
}
void PackerReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackerReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:bugu_packer.service.v1.PackerReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackerReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackerReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bugu_packer.service.v1.PackerReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(1, s, target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bugu_packer.service.v1.PackerReply)
  return target;
}

size_t PackerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bugu_packer.service.v1.PackerReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_.Get(i));
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PackerReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PackerReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PackerReply::GetClassData() const { return &_class_data_; }

void PackerReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PackerReply *>(to)->MergeFrom(
      static_cast<const PackerReply &>(from));
}


void PackerReply::MergeFrom(const PackerReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bugu_packer.service.v1.PackerReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PackerReply::CopyFrom(const PackerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bugu_packer.service.v1.PackerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackerReply::IsInitialized() const {
  return true;
}

void PackerReply::InternalSwap(PackerReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackerReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bugu_5fpacker_2eproto_getter, &descriptor_table_bugu_5fpacker_2eproto_once,
      file_level_metadata_bugu_5fpacker_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace service
}  // namespace bugu_packer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bugu_packer::service::v1::PackerRequest* Arena::CreateMaybeMessage< ::bugu_packer::service::v1::PackerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bugu_packer::service::v1::PackerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bugu_packer::service::v1::PackerReply* Arena::CreateMaybeMessage< ::bugu_packer::service::v1::PackerReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bugu_packer::service::v1::PackerReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
