// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/detect.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuguDetectClient is the client API for BuguDetect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuguDetectClient interface {
	Detect(ctx context.Context, in *DetectRequest, opts ...grpc.CallOption) (*DetectReply, error)
}

type buguDetectClient struct {
	cc grpc.ClientConnInterface
}

func NewBuguDetectClient(cc grpc.ClientConnInterface) BuguDetectClient {
	return &buguDetectClient{cc}
}

func (c *buguDetectClient) Detect(ctx context.Context, in *DetectRequest, opts ...grpc.CallOption) (*DetectReply, error) {
	out := new(DetectReply)
	err := c.cc.Invoke(ctx, "/bugu_detect.service.v1.BuguDetect/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuguDetectServer is the server API for BuguDetect service.
// All implementations must embed UnimplementedBuguDetectServer
// for forward compatibility
type BuguDetectServer interface {
	Detect(context.Context, *DetectRequest) (*DetectReply, error)
	mustEmbedUnimplementedBuguDetectServer()
}

// UnimplementedBuguDetectServer must be embedded to have forward compatible implementations.
type UnimplementedBuguDetectServer struct {
}

func (UnimplementedBuguDetectServer) Detect(context.Context, *DetectRequest) (*DetectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (UnimplementedBuguDetectServer) mustEmbedUnimplementedBuguDetectServer() {}

// UnsafeBuguDetectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuguDetectServer will
// result in compilation errors.
type UnsafeBuguDetectServer interface {
	mustEmbedUnimplementedBuguDetectServer()
}

func RegisterBuguDetectServer(s grpc.ServiceRegistrar, srv BuguDetectServer) {
	s.RegisterService(&BuguDetect_ServiceDesc, srv)
}

func _BuguDetect_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuguDetectServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bugu_detect.service.v1.BuguDetect/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuguDetectServer).Detect(ctx, req.(*DetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuguDetect_ServiceDesc is the grpc.ServiceDesc for BuguDetect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuguDetect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bugu_detect.service.v1.BuguDetect",
	HandlerType: (*BuguDetectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _BuguDetect_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/detect.proto",
}
