// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/bugu_obfusion.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuguObfusionClient is the client API for BuguObfusion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuguObfusionClient interface {
	Obfusion(ctx context.Context, in *ObfusionRequest, opts ...grpc.CallOption) (*ObfusionReply, error)
}

type buguObfusionClient struct {
	cc grpc.ClientConnInterface
}

func NewBuguObfusionClient(cc grpc.ClientConnInterface) BuguObfusionClient {
	return &buguObfusionClient{cc}
}

func (c *buguObfusionClient) Obfusion(ctx context.Context, in *ObfusionRequest, opts ...grpc.CallOption) (*ObfusionReply, error) {
	out := new(ObfusionReply)
	err := c.cc.Invoke(ctx, "/bugu_obfusion.service.v1.BuguObfusion/Obfusion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuguObfusionServer is the server API for BuguObfusion service.
// All implementations must embed UnimplementedBuguObfusionServer
// for forward compatibility
type BuguObfusionServer interface {
	Obfusion(context.Context, *ObfusionRequest) (*ObfusionReply, error)
	mustEmbedUnimplementedBuguObfusionServer()
}

// UnimplementedBuguObfusionServer must be embedded to have forward compatible implementations.
type UnimplementedBuguObfusionServer struct {
}

func (UnimplementedBuguObfusionServer) Obfusion(context.Context, *ObfusionRequest) (*ObfusionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Obfusion not implemented")
}
func (UnimplementedBuguObfusionServer) mustEmbedUnimplementedBuguObfusionServer() {}

// UnsafeBuguObfusionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuguObfusionServer will
// result in compilation errors.
type UnsafeBuguObfusionServer interface {
	mustEmbedUnimplementedBuguObfusionServer()
}

func RegisterBuguObfusionServer(s grpc.ServiceRegistrar, srv BuguObfusionServer) {
	s.RegisterService(&BuguObfusion_ServiceDesc, srv)
}

func _BuguObfusion_Obfusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObfusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuguObfusionServer).Obfusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bugu_obfusion.service.v1.BuguObfusion/Obfusion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuguObfusionServer).Obfusion(ctx, req.(*ObfusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuguObfusion_ServiceDesc is the grpc.ServiceDesc for BuguObfusion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuguObfusion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bugu_obfusion.service.v1.BuguObfusion",
	HandlerType: (*BuguObfusionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Obfusion",
			Handler:    _BuguObfusion_Obfusion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bugu_obfusion.proto",
}
