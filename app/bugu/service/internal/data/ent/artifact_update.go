// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bugu/app/bugu/service/internal/data/ent/artifact"
	"bugu/app/bugu/service/internal/data/ent/file"
	"bugu/app/bugu/service/internal/data/ent/predicate"
	"bugu/app/bugu/service/internal/data/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ArtifactUpdate is the builder for updating Artifact entities.
type ArtifactUpdate struct {
	config
	hooks    []Hook
	mutation *ArtifactMutation
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (au *ArtifactUpdate) Where(ps ...predicate.Artifact) *ArtifactUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetFileID sets the "file_id" field.
func (au *ArtifactUpdate) SetFileID(u uuid.UUID) *ArtifactUpdate {
	au.mutation.SetFileID(u)
	return au
}

// SetMethod sets the "method" field.
func (au *ArtifactUpdate) SetMethod(s string) *ArtifactUpdate {
	au.mutation.SetMethod(s)
	return au
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableMethod(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetMethod(*s)
	}
	return au
}

// ClearMethod clears the value of the "method" field.
func (au *ArtifactUpdate) ClearMethod() *ArtifactUpdate {
	au.mutation.ClearMethod()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ArtifactUpdate) SetUpdatedAt(t time.Time) *ArtifactUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableUpdatedAt(t *time.Time) *ArtifactUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// SetAffiliatedFileID sets the "affiliated_file" edge to the File entity by ID.
func (au *ArtifactUpdate) SetAffiliatedFileID(id uuid.UUID) *ArtifactUpdate {
	au.mutation.SetAffiliatedFileID(id)
	return au
}

// SetAffiliatedFile sets the "affiliated_file" edge to the File entity.
func (au *ArtifactUpdate) SetAffiliatedFile(f *File) *ArtifactUpdate {
	return au.SetAffiliatedFileID(f.ID)
}

// AddAffiliatedUserIDs adds the "affiliated_user" edge to the User entity by IDs.
func (au *ArtifactUpdate) AddAffiliatedUserIDs(ids ...uuid.UUID) *ArtifactUpdate {
	au.mutation.AddAffiliatedUserIDs(ids...)
	return au
}

// AddAffiliatedUser adds the "affiliated_user" edges to the User entity.
func (au *ArtifactUpdate) AddAffiliatedUser(u ...*User) *ArtifactUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddAffiliatedUserIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (au *ArtifactUpdate) Mutation() *ArtifactMutation {
	return au.mutation
}

// ClearAffiliatedFile clears the "affiliated_file" edge to the File entity.
func (au *ArtifactUpdate) ClearAffiliatedFile() *ArtifactUpdate {
	au.mutation.ClearAffiliatedFile()
	return au
}

// ClearAffiliatedUser clears all "affiliated_user" edges to the User entity.
func (au *ArtifactUpdate) ClearAffiliatedUser() *ArtifactUpdate {
	au.mutation.ClearAffiliatedUser()
	return au
}

// RemoveAffiliatedUserIDs removes the "affiliated_user" edge to User entities by IDs.
func (au *ArtifactUpdate) RemoveAffiliatedUserIDs(ids ...uuid.UUID) *ArtifactUpdate {
	au.mutation.RemoveAffiliatedUserIDs(ids...)
	return au
}

// RemoveAffiliatedUser removes "affiliated_user" edges to User entities.
func (au *ArtifactUpdate) RemoveAffiliatedUser(u ...*User) *ArtifactUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveAffiliatedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtifactUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArtifactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtifactUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtifactUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtifactUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ArtifactUpdate) check() error {
	if _, ok := au.mutation.AffiliatedFileID(); au.mutation.AffiliatedFileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Artifact.affiliated_file"`)
	}
	return nil
}

func (au *ArtifactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artifact.Table,
			Columns: artifact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: artifact.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: artifact.FieldMethod,
		})
	}
	if au.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: artifact.FieldMethod,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: artifact.FieldUpdatedAt,
		})
	}
	if au.mutation.AffiliatedFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   artifact.AffiliatedFileTable,
			Columns: []string{artifact.AffiliatedFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AffiliatedFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   artifact.AffiliatedFileTable,
			Columns: []string{artifact.AffiliatedFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AffiliatedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AffiliatedUserTable,
			Columns: artifact.AffiliatedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAffiliatedUserIDs(); len(nodes) > 0 && !au.mutation.AffiliatedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AffiliatedUserTable,
			Columns: artifact.AffiliatedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AffiliatedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AffiliatedUserTable,
			Columns: artifact.AffiliatedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ArtifactUpdateOne is the builder for updating a single Artifact entity.
type ArtifactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtifactMutation
}

// SetFileID sets the "file_id" field.
func (auo *ArtifactUpdateOne) SetFileID(u uuid.UUID) *ArtifactUpdateOne {
	auo.mutation.SetFileID(u)
	return auo
}

// SetMethod sets the "method" field.
func (auo *ArtifactUpdateOne) SetMethod(s string) *ArtifactUpdateOne {
	auo.mutation.SetMethod(s)
	return auo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableMethod(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetMethod(*s)
	}
	return auo
}

// ClearMethod clears the value of the "method" field.
func (auo *ArtifactUpdateOne) ClearMethod() *ArtifactUpdateOne {
	auo.mutation.ClearMethod()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ArtifactUpdateOne) SetUpdatedAt(t time.Time) *ArtifactUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableUpdatedAt(t *time.Time) *ArtifactUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// SetAffiliatedFileID sets the "affiliated_file" edge to the File entity by ID.
func (auo *ArtifactUpdateOne) SetAffiliatedFileID(id uuid.UUID) *ArtifactUpdateOne {
	auo.mutation.SetAffiliatedFileID(id)
	return auo
}

// SetAffiliatedFile sets the "affiliated_file" edge to the File entity.
func (auo *ArtifactUpdateOne) SetAffiliatedFile(f *File) *ArtifactUpdateOne {
	return auo.SetAffiliatedFileID(f.ID)
}

// AddAffiliatedUserIDs adds the "affiliated_user" edge to the User entity by IDs.
func (auo *ArtifactUpdateOne) AddAffiliatedUserIDs(ids ...uuid.UUID) *ArtifactUpdateOne {
	auo.mutation.AddAffiliatedUserIDs(ids...)
	return auo
}

// AddAffiliatedUser adds the "affiliated_user" edges to the User entity.
func (auo *ArtifactUpdateOne) AddAffiliatedUser(u ...*User) *ArtifactUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddAffiliatedUserIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (auo *ArtifactUpdateOne) Mutation() *ArtifactMutation {
	return auo.mutation
}

// ClearAffiliatedFile clears the "affiliated_file" edge to the File entity.
func (auo *ArtifactUpdateOne) ClearAffiliatedFile() *ArtifactUpdateOne {
	auo.mutation.ClearAffiliatedFile()
	return auo
}

// ClearAffiliatedUser clears all "affiliated_user" edges to the User entity.
func (auo *ArtifactUpdateOne) ClearAffiliatedUser() *ArtifactUpdateOne {
	auo.mutation.ClearAffiliatedUser()
	return auo
}

// RemoveAffiliatedUserIDs removes the "affiliated_user" edge to User entities by IDs.
func (auo *ArtifactUpdateOne) RemoveAffiliatedUserIDs(ids ...uuid.UUID) *ArtifactUpdateOne {
	auo.mutation.RemoveAffiliatedUserIDs(ids...)
	return auo
}

// RemoveAffiliatedUser removes "affiliated_user" edges to User entities.
func (auo *ArtifactUpdateOne) RemoveAffiliatedUser(u ...*User) *ArtifactUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveAffiliatedUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtifactUpdateOne) Select(field string, fields ...string) *ArtifactUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artifact entity.
func (auo *ArtifactUpdateOne) Save(ctx context.Context) (*Artifact, error) {
	var (
		err  error
		node *Artifact
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArtifactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtifactUpdateOne) SaveX(ctx context.Context) *Artifact {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtifactUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtifactUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ArtifactUpdateOne) check() error {
	if _, ok := auo.mutation.AffiliatedFileID(); auo.mutation.AffiliatedFileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Artifact.affiliated_file"`)
	}
	return nil
}

func (auo *ArtifactUpdateOne) sqlSave(ctx context.Context) (_node *Artifact, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artifact.Table,
			Columns: artifact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: artifact.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Artifact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifact.FieldID)
		for _, f := range fields {
			if !artifact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artifact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: artifact.FieldMethod,
		})
	}
	if auo.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: artifact.FieldMethod,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: artifact.FieldUpdatedAt,
		})
	}
	if auo.mutation.AffiliatedFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   artifact.AffiliatedFileTable,
			Columns: []string{artifact.AffiliatedFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AffiliatedFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   artifact.AffiliatedFileTable,
			Columns: []string{artifact.AffiliatedFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AffiliatedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AffiliatedUserTable,
			Columns: artifact.AffiliatedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAffiliatedUserIDs(); len(nodes) > 0 && !auo.mutation.AffiliatedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AffiliatedUserTable,
			Columns: artifact.AffiliatedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AffiliatedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifact.AffiliatedUserTable,
			Columns: artifact.AffiliatedUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Artifact{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
