// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/hominsu/bugu/app/bugu/service/internal/biz"
	"github.com/hominsu/bugu/app/bugu/service/internal/conf"
	"github.com/hominsu/bugu/app/bugu/service/internal/data"
	"github.com/hominsu/bugu/app/bugu/service/internal/server"
	"github.com/hominsu/bugu/app/bugu/service/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(registry *conf.Registry, confServer *conf.Server, confData *conf.Data, jwt *conf.Jwt, logger log.Logger) (*kratos.App, func(), error) {
	client := data.NewEntClient(confData, logger)
	cmdable := data.NewRedisCmd(confData, logger)
	buguObfusionClient := data.NewOubfusionServiceClient(confServer)
	dataData, cleanup, err := data.NewData(client, cmdable, buguObfusionClient, confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, jwt, logger)
	fileRepo := data.NewFileRepo(dataData, logger)
	fileUsecase := biz.NewFileUsecase(fileRepo, logger)
	artifactRepo := data.NewArtifactRepo(dataData, logger)
	obfusionRepo := data.NewObfusionRepo(dataData, logger)
	artifactUsecase := biz.NewArtifactUsecase(artifactRepo, obfusionRepo, fileRepo, confData, logger)
	buguService := service.NewBuguService(userUsecase, fileUsecase, artifactUsecase, logger)
	buguFileService := service.NewBuguFileService(fileUsecase, confData, logger)
	httpServer := server.NewHTTPServer(confServer, jwt, buguService, buguFileService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
